import React, { useState, useEffect } from 'react';
import axios from 'axios';
import {
    Box,
    Paper,
    Table,
    TableBody,
    TableCell,
    TableContainer,
    TableHead,
    TableRow,
    Typography,
    Button,
    Dialog,
    DialogContent,
    DialogTitle,
    DialogActions,
    IconButton,
    Alert,
    Snackbar,
    TextField,
    MenuItem,
   
   
} from '@mui/material';
import { Edit as EditIcon, Delete as DeleteIcon } from '@mui/icons-material';

const PurchaserDashboard = () => {
    const [purchaseOrders, setPurchaseOrders] = useState([]);
    const [newDeliveryStatus, setNewDeliveryStatus] = useState('');
    const [openDialog, setOpenDialog] = useState(false);
    const [selectedOrder, setSelectedOrder] = useState(null);
    const deliveryStatusOptions = ['Processing', 'Shipped', 'Delivered'];
    const [error, setError] = useState('');
    const [snackbar, setSnackbar] = useState({
        open: false,
        message: '',
        severity: 'success'
    });
    const [expectedDeliveryDate, setExpectedDeliveryDate] = useState('');

    useEffect(() => {
        fetchPurchaseOrders();
    }, []);

    const fetchPurchaseOrders = async () => {
        try {
            const response = await axios.get('/api/purchase-orders');
            setPurchaseOrders(response.data);
        } catch (err) {
            console.error('Error fetching purchase orders:', err);
            setError('Error fetching purchase orders');
            setSnackbar({
                open: true,
                message: 'Error fetching purchase orders',
                severity: 'error'
            });
        }
    };

    const handleCreatePurchaseOrder = async (proposalId) => {
        try {
            const response = await axios.post(`/api/purchase-orders/create/${proposalId}`);
            setSnackbar({
                open: true,
                message: 'Purchase order created successfully',
                severity: 'success'
            });
            fetchPurchaseOrders();
        } catch (err) {
            console.error('Error creating purchase order:', err);
            setSnackbar({
                open: true,
                message: 'Error creating purchase order',
                severity: 'error'
            });
        }
    };

    const handleUpdateOrderStatus = async (orderId, newStatus) => {
        try {
            await axios.put(`/api/purchase-orders/${orderId}/order-status`, null, {
                params: { newOrderStatus: newStatus }
            });
            setSnackbar({
                open: true,
                message: 'Order status updated successfully',
                severity: 'success'
            });
            fetchPurchaseOrders();
        } catch (err) {
            console.error('Error updating order status:', err);
            setSnackbar({
                open: true,
                message: 'Error updating order status',
                severity: 'error'
            });
        }
    };

    const handleUpdateDeliveryStatus = async () => {
        try {
            if (!newDeliveryStatus || !expectedDeliveryDate) {
                setSnackbar({
                    open: true,
                    message: 'Please fill in all fields',
                    severity: 'error'
                });
                return;
            }
    
            await axios.put(`/api/purchase-orders/${selectedOrder.orderId}/delivery-status`, null, {
                params: {
                    newStatus: newDeliveryStatus,
                    expectedDeliveryDate: expectedDeliveryDate
                }
            });
            setSnackbar({
                open: true,
                message: 'Delivery status updated successfully',
                severity: 'success'
            });
            setOpenDialog(false);
            fetchPurchaseOrders();
        } catch (err) {
            console.error('Error updating delivery status:', err);
            setSnackbar({
                open: true,
                message: 'Error updating delivery status',
                severity: 'error'
            });
        }
    };

    const handleOpenDialog = (order) => {
        setSelectedOrder(order);
        setExpectedDeliveryDate('');
        setNewDeliveryStatus('');
        setOpenDialog(true);
    };

    const handleCloseDialog = () => {
        setOpenDialog(false);
        setSelectedOrder(null);
        setExpectedDeliveryDate('');
        setNewDeliveryStatus('');
    };

    const handleCloseSnackbar = () => {
        setSnackbar(prev => ({ ...prev, open: false }));
    };

    const formatDate = (dateString) => {
        return new Date(dateString).toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'short',
            day: 'numeric'
        });
    };

    return (
        <Box sx={{ p: 3, minHeight: '100vh', backgroundColor: '#f5f5f5' }}>
            <Box sx={{ maxWidth: 1200, margin: '0 auto' }}>
                <Typography variant="h5" sx={{ fontWeight: 'bold', color: '#333', mb: 3 }}>
                    Purchase Order Management
                </Typography>

                {error && (
                    <Alert severity="error" sx={{ mb: 2 }}>
                        {error}
                    </Alert>
                )}

                <TableContainer component={Paper} sx={{ mb: 4, boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)' }}>
                    <Table>
                        <TableHead>
                            <TableRow sx={{ backgroundColor: '#1a237e' }}>
                                <TableCell sx={{ color: 'white' }}>Order ID</TableCell>
                                <TableCell sx={{ color: 'white' }}>Item</TableCell>
                                <TableCell sx={{ color: 'white' }}>Department</TableCell>
                                <TableCell sx={{ color: 'white' }}>Quantity</TableCell>
                                <TableCell sx={{ color: 'white' }}>Cost</TableCell>
                                <TableCell sx={{ color: 'white' }}>Order Status</TableCell>
                                <TableCell sx={{ color: 'white' }}>Delivery Status</TableCell>
                                <TableCell sx={{ color: 'white' }}>Expected Delivery</TableCell>
                                <TableCell sx={{ color: 'white' }}>Actions</TableCell>
                            </TableRow>
                        </TableHead>
                        <TableBody>
                            {purchaseOrders.map((order) => (
                                <TableRow key={order.orderId} sx={{ backgroundColor: '#F7F6FE' }}>
                                    <TableCell>{order.orderId}</TableCell>
                                    <TableCell>{order.itemName}</TableCell>
                                    <TableCell>{order.department}</TableCell>
                                    <TableCell>{order.quantity}</TableCell>
                                    <TableCell>${order.finalCost.toFixed(2)}</TableCell>
                                    <TableCell>
                                        <Box
                                            sx={{
                                                backgroundColor: order.orderStatus === 'ORDERED' ? '#e8f5e9' : '#fff3e0',
                                                color: order.orderStatus === 'ORDERED' ? '#2e7d32' : '#e65100',
                                                p: 1,
                                                borderRadius: 1,
                                                textAlign: 'center'
                                            }}
                                        >
                                            {order.orderStatus}
                                        </Box>
                                    </TableCell>
                                    <TableCell>
                                        <Box
                                            sx={{
                                                backgroundColor: 
                                                    order.deliveryStatus === 'Delivered' ? '#e8f5e9' :
                                                    order.deliveryStatus === 'Shipped' ? '#e3f2fd' :
                                                    '#fff3e0',
                                                color:
                                                    order.deliveryStatus === 'Delivered' ? '#2e7d32' :
                                                    order.deliveryStatus === 'Shipped' ? '#1565c0' :
                                                    '#e65100',
                                                p: 1,
                                                borderRadius: 1,
                                                textAlign: 'center'
                                            }}
                                        >
                                            {order.deliveryStatus}
                                        </Box>
                                    </TableCell>
                                    <TableCell>
                                        {order.expectedDeliveryDate ? formatDate(order.expectedDeliveryDate) : '-'}
                                    </TableCell>
                                    <TableCell>
                                        <Box sx={{ display: 'flex', gap: 1 }}>
                                            {order.orderStatus === 'PENDING' && (
                                                <Button
                                                    variant="contained"
                                                    size="small"
                                                    onClick={() => handleUpdateOrderStatus(order.orderId, 'ORDERED')}
                                                    sx={{ backgroundColor: '#1a237e' }}
                                                >
                                                    Place Order
                                                </Button>
                                            )}
                                            {order.orderStatus === 'ORDERED' && (
                                                <Button
                                                    variant="contained"
                                                    size="small"
                                                    onClick={() => handleOpenDialog(order)}
                                                    sx={{ backgroundColor: '#1565c0' }}
                                                >
                                                    Update Delivery
                                                </Button>
                                            )}
                                        </Box>
                                    </TableCell>
                                </TableRow>
                            ))}
                        </TableBody>
                    </Table>
                </TableContainer>

                <Dialog open={openDialog} onClose={handleCloseDialog}>
    <DialogTitle>Update Delivery Status</DialogTitle>
    <DialogContent>
        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, minWidth: '300px', mt: 2 }}>
            {/* Delivery Status Dropdown */}
            <TextField
                select
                label="Delivery Status"
                value={newDeliveryStatus}
                onChange={(e) => setNewDeliveryStatus(e.target.value)}
                fullWidth
            >
                {deliveryStatusOptions.map((status) => (
                    <MenuItem key={status} value={status}>
                        {status}
                    </MenuItem>
                ))}
            </TextField>

            {/* Expected Delivery Date Input */}
            <TextField
                label="Expected Delivery Date"
                type="datetime-local"
                value={expectedDeliveryDate}
                onChange={(e) => setExpectedDeliveryDate(e.target.value)}
                fullWidth
                InputLabelProps={{
                    shrink: true,
                }}
            />
        </Box>
    </DialogContent>
    <DialogActions>
        <Button onClick={handleCloseDialog}>Cancel</Button>
        <Button 
            onClick={handleUpdateDeliveryStatus} 
            variant="contained"
            disabled={!newDeliveryStatus || !expectedDeliveryDate}
        >
            Update
        </Button>
    </DialogActions>
</Dialog>


                <Snackbar
                    open={snackbar.open}
                    autoHideDuration={6000}
                    onClose={handleCloseSnackbar}
                    anchorOrigin={{ vertical: 'top', horizontal: 'right' }}
                >
                    <Alert
                        onClose={handleCloseSnackbar}
                        severity={snackbar.severity}
                        sx={{ width: '100%' }}
                    >
                        {snackbar.message}
                    </Alert>
                </Snackbar>
            </Box>
        </Box>
    );
};

export default PurchaserDashboard;